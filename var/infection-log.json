{"stats":{"totalMutantsCount":68,"killedCount":68,"notCoveredCount":0,"escapedCount":0,"errorCount":0,"syntaxErrorCount":0,"skippedCount":0,"ignoredCount":0,"timeOutCount":0,"msi":100,"mutationCodeCoverage":100,"coveredCodeMsi":100},"escaped":[],"timeouted":[],"killed":[{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace DriveManager\\Application\\Service\\DropFile;\n\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse DriveManager\\Domain\\Model\\File\\FileContent;\nuse DriveManager\\Domain\\Model\\File\\FIleRepositoryInterface;\nuse DriveManager\\Domain\\Model\\File\\Path;\nclass DropFile\n{\n    private DropFileResponse $dropFileResponse;\n    public function __construct(private DropFileInterface $dropFileApi, private FIleRepositoryInterface $repository)\n    {\n    }\n    public function execute(DropFileRequest $request): void\n    {\n        $fileName = new FileName($request->fileToDeposit);\n        $path = new Path($request->directoryName);\n        $fileContent = new FileContent($request->fileContent);\n        $file = new File($fileName, $path, $fileContent);\n        $this->repository->add($file);\n        $this->dropFileApi->dropFile($file);\n        $this->dropFileResponse = new DropFileResponse($file->getId()->__toString(), $file->getFileName(), $file->getPath(), $file->getDate()->format('Y-m-d H:i:s'));\n    }\n    public function getResponse(): DropFileResponse\n    {\n        return $this->dropFileResponse;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Application\\Service\\DropFile;\n\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse DriveManager\\Domain\\Model\\File\\FileContent;\nuse DriveManager\\Domain\\Model\\File\\FIleRepositoryInterface;\nuse DriveManager\\Domain\\Model\\File\\Path;\nclass DropFile\n{\n    private DropFileResponse $dropFileResponse;\n    public function __construct(private DropFileInterface $dropFileApi, private FIleRepositoryInterface $repository)\n    {\n    }\n    protected function execute(DropFileRequest $request): void\n    {\n        $fileName = new FileName($request->fileToDeposit);\n        $path = new Path($request->directoryName);\n        $fileContent = new FileContent($request->fileContent);\n        $file = new File($fileName, $path, $fileContent);\n        $this->repository->add($file);\n        $this->dropFileApi->dropFile($file);\n        $this->dropFileResponse = new DropFileResponse($file->getId()->__toString(), $file->getFileName(), $file->getPath(), $file->getDate()->format('Y-m-d H:i:s'));\n    }\n    public function getResponse(): DropFileResponse\n    {\n        return $this->dropFileResponse;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Application\/Service\/DropFile\/DropFile.php","originalStartLine":19},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private DropFileInterface $dropFileApi, private FIleRepositoryInterface $repository)\n     {\n     }\n-    public function execute(DropFileRequest $request): void\n+    protected function execute(DropFileRequest $request): void\n     {\n         $fileName = new FileName($request->fileToDeposit);\n         $path = new Path($request->directoryName);","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.18cb4169cec910fb708e23aad1603730.infection.xml\n\nEEE                                                                 3 \/ 3 (100%)\n\nTime: 00:00.012, Memory: 12.00 MB\n\nThere were 3 errors:\n\n1) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testDepositASimpleFile\nError: Call to protected method DriveManager\\Application\\Service\\DropFile\\DropFile::execute() from scope DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:23\n\n2) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testDepositAFileWithComplexPath\nError: Call to protected method DriveManager\\Application\\Service\\DropFile\\DropFile::execute() from scope DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:45\n\n3) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testCountFilesDeposit\nError: Call to protected method DriveManager\\Application\\Service\\DropFile\\DropFile::execute() from scope DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:65\n\nERRORS!\nTests: 3, Assertions: 0, Errors: 3."},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace DriveManager\\Application\\Service\\DropFile;\n\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse DriveManager\\Domain\\Model\\File\\FileContent;\nuse DriveManager\\Domain\\Model\\File\\FIleRepositoryInterface;\nuse DriveManager\\Domain\\Model\\File\\Path;\nclass DropFile\n{\n    private DropFileResponse $dropFileResponse;\n    public function __construct(private DropFileInterface $dropFileApi, private FIleRepositoryInterface $repository)\n    {\n    }\n    public function execute(DropFileRequest $request): void\n    {\n        $fileName = new FileName($request->fileToDeposit);\n        $path = new Path($request->directoryName);\n        $fileContent = new FileContent($request->fileContent);\n        $file = new File($fileName, $path, $fileContent);\n        $this->repository->add($file);\n        $this->dropFileApi->dropFile($file);\n        $this->dropFileResponse = new DropFileResponse($file->getId()->__toString(), $file->getFileName(), $file->getPath(), $file->getDate()->format('Y-m-d H:i:s'));\n    }\n    public function getResponse(): DropFileResponse\n    {\n        return $this->dropFileResponse;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Application\\Service\\DropFile;\n\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse DriveManager\\Domain\\Model\\File\\FileContent;\nuse DriveManager\\Domain\\Model\\File\\FIleRepositoryInterface;\nuse DriveManager\\Domain\\Model\\File\\Path;\nclass DropFile\n{\n    private DropFileResponse $dropFileResponse;\n    public function __construct(private DropFileInterface $dropFileApi, private FIleRepositoryInterface $repository)\n    {\n    }\n    public function execute(DropFileRequest $request): void\n    {\n        $fileName = new FileName($request->fileToDeposit);\n        $path = new Path($request->directoryName);\n        $fileContent = new FileContent($request->fileContent);\n        $file = new File($fileName, $path, $fileContent);\n        \n        $this->dropFileApi->dropFile($file);\n        $this->dropFileResponse = new DropFileResponse($file->getId()->__toString(), $file->getFileName(), $file->getPath(), $file->getDate()->format('Y-m-d H:i:s'));\n    }\n    public function getResponse(): DropFileResponse\n    {\n        return $this->dropFileResponse;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Application\/Service\/DropFile\/DropFile.php","originalStartLine":26},"diff":"--- Original\n+++ New\n@@ @@\n         $path = new Path($request->directoryName);\n         $fileContent = new FileContent($request->fileContent);\n         $file = new File($fileName, $path, $fileContent);\n-        $this->repository->add($file);\n+        \n         $this->dropFileApi->dropFile($file);\n         $this->dropFileResponse = new DropFileResponse($file->getId()->__toString(), $file->getFileName(), $file->getPath(), $file->getDate()->format('Y-m-d H:i:s'));\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.c903a968f97c1f6effa3b59b4b6ababb.infection.xml\n\nE..                                                                 3 \/ 3 (100%)\n\nTime: 00:00.014, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testDepositASimpleFile\nError: Typed property DriveManager\\Infrastructure\\Persistence\\FileRepositoryInMemory::$files must not be accessed before initialization\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/Persistence\/FileRepositoryInMemory.php:24\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:26\n\nERRORS!\nTests: 3, Assertions: 3, Errors: 1."},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace DriveManager\\Application\\Service\\DropFile;\n\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse DriveManager\\Domain\\Model\\File\\FileContent;\nuse DriveManager\\Domain\\Model\\File\\FIleRepositoryInterface;\nuse DriveManager\\Domain\\Model\\File\\Path;\nclass DropFile\n{\n    private DropFileResponse $dropFileResponse;\n    public function __construct(private DropFileInterface $dropFileApi, private FIleRepositoryInterface $repository)\n    {\n    }\n    public function execute(DropFileRequest $request): void\n    {\n        $fileName = new FileName($request->fileToDeposit);\n        $path = new Path($request->directoryName);\n        $fileContent = new FileContent($request->fileContent);\n        $file = new File($fileName, $path, $fileContent);\n        $this->repository->add($file);\n        $this->dropFileApi->dropFile($file);\n        $this->dropFileResponse = new DropFileResponse($file->getId()->__toString(), $file->getFileName(), $file->getPath(), $file->getDate()->format('Y-m-d H:i:s'));\n    }\n    public function getResponse(): DropFileResponse\n    {\n        return $this->dropFileResponse;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Application\\Service\\DropFile;\n\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse DriveManager\\Domain\\Model\\File\\FileContent;\nuse DriveManager\\Domain\\Model\\File\\FIleRepositoryInterface;\nuse DriveManager\\Domain\\Model\\File\\Path;\nclass DropFile\n{\n    private DropFileResponse $dropFileResponse;\n    public function __construct(private DropFileInterface $dropFileApi, private FIleRepositoryInterface $repository)\n    {\n    }\n    public function execute(DropFileRequest $request): void\n    {\n        $fileName = new FileName($request->fileToDeposit);\n        $path = new Path($request->directoryName);\n        $fileContent = new FileContent($request->fileContent);\n        $file = new File($fileName, $path, $fileContent);\n        $this->repository->add($file);\n        \n        $this->dropFileResponse = new DropFileResponse($file->getId()->__toString(), $file->getFileName(), $file->getPath(), $file->getDate()->format('Y-m-d H:i:s'));\n    }\n    public function getResponse(): DropFileResponse\n    {\n        return $this->dropFileResponse;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Application\/Service\/DropFile\/DropFile.php","originalStartLine":27},"diff":"--- Original\n+++ New\n@@ @@\n         $fileContent = new FileContent($request->fileContent);\n         $file = new File($fileName, $path, $fileContent);\n         $this->repository->add($file);\n-        $this->dropFileApi->dropFile($file);\n+        \n         $this->dropFileResponse = new DropFileResponse($file->getId()->__toString(), $file->getFileName(), $file->getPath(), $file->getDate()->format('Y-m-d H:i:s'));\n     }\n     public function getResponse(): DropFileResponse","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b4cf0599327f75b7143520db4b051b0a.infection.xml\n\nF\n\nTime: 00:00.013, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testDepositASimpleFile\nFailed asserting that 0 matches expected 1.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:32\n\nFAILURES!\nTests: 1, Assertions: 4, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace DriveManager\\Application\\Service\\DropFile;\n\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse DriveManager\\Domain\\Model\\File\\FileContent;\nuse DriveManager\\Domain\\Model\\File\\FIleRepositoryInterface;\nuse DriveManager\\Domain\\Model\\File\\Path;\nclass DropFile\n{\n    private DropFileResponse $dropFileResponse;\n    public function __construct(private DropFileInterface $dropFileApi, private FIleRepositoryInterface $repository)\n    {\n    }\n    public function execute(DropFileRequest $request): void\n    {\n        $fileName = new FileName($request->fileToDeposit);\n        $path = new Path($request->directoryName);\n        $fileContent = new FileContent($request->fileContent);\n        $file = new File($fileName, $path, $fileContent);\n        $this->repository->add($file);\n        $this->dropFileApi->dropFile($file);\n        $this->dropFileResponse = new DropFileResponse($file->getId()->__toString(), $file->getFileName(), $file->getPath(), $file->getDate()->format('Y-m-d H:i:s'));\n    }\n    public function getResponse(): DropFileResponse\n    {\n        return $this->dropFileResponse;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Application\\Service\\DropFile;\n\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse DriveManager\\Domain\\Model\\File\\FileContent;\nuse DriveManager\\Domain\\Model\\File\\FIleRepositoryInterface;\nuse DriveManager\\Domain\\Model\\File\\Path;\nclass DropFile\n{\n    private DropFileResponse $dropFileResponse;\n    public function __construct(private DropFileInterface $dropFileApi, private FIleRepositoryInterface $repository)\n    {\n    }\n    public function execute(DropFileRequest $request): void\n    {\n        $fileName = new FileName($request->fileToDeposit);\n        $path = new Path($request->directoryName);\n        $fileContent = new FileContent($request->fileContent);\n        $file = new File($fileName, $path, $fileContent);\n        $this->repository->add($file);\n        $this->dropFileApi->dropFile($file);\n        $this->dropFileResponse = new DropFileResponse($file->getId()->__toString(), $file->getFileName(), $file->getPath(), $file->getDate()->format('Y-m-d H:i:s'));\n    }\n    protected function getResponse(): DropFileResponse\n    {\n        return $this->dropFileResponse;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Application\/Service\/DropFile\/DropFile.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n         $this->dropFileApi->dropFile($file);\n         $this->dropFileResponse = new DropFileResponse($file->getId()->__toString(), $file->getFileName(), $file->getPath(), $file->getDate()->format('Y-m-d H:i:s'));\n     }\n-    public function getResponse(): DropFileResponse\n+    protected function getResponse(): DropFileResponse\n     {\n         return $this->dropFileResponse;\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.a50d8584ebbe39897bcf3967f2960133.infection.xml\n\nEE.                                                                 3 \/ 3 (100%)\n\nTime: 00:00.014, Memory: 12.00 MB\n\nThere were 2 errors:\n\n1) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testDepositASimpleFile\nError: Call to protected method DriveManager\\Application\\Service\\DropFile\\DropFile::getResponse() from scope DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:24\n\n2) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testDepositAFileWithComplexPath\nError: Call to protected method DriveManager\\Application\\Service\\DropFile\\DropFile::getResponse() from scope DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:46\n\nERRORS!\nTests: 3, Assertions: 1, Errors: 2."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse Safe\\DateTimeImmutable;\nclass File\n{\n    private DateTimeImmutable $date;\n    public function __construct(private FileName $fileName, private Path $path = new Path(), private FileContent $content = new FileContent(), private FileId $id = new FileId())\n    {\n        $this->date = new DateTimeImmutable();\n    }\n    public function getFileName(): string\n    {\n        return $this->fileName->getFileName();\n    }\n    public function getContent(): string\n    {\n        return $this->content->getContent();\n    }\n    public function getId(): FileId\n    {\n        return $this->id;\n    }\n    public function getDate(): DateTimeImmutable\n    {\n        return $this->date;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n        \/\/->getPath().$this->fileName\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse Safe\\DateTimeImmutable;\nclass File\n{\n    private DateTimeImmutable $date;\n    public function __construct(private FileName $fileName, private Path $path = new Path(), private FileContent $content = new FileContent(), private FileId $id = new FileId())\n    {\n        $this->date = new DateTimeImmutable();\n    }\n    protected function getFileName(): string\n    {\n        return $this->fileName->getFileName();\n    }\n    public function getContent(): string\n    {\n        return $this->content->getContent();\n    }\n    public function getId(): FileId\n    {\n        return $this->id;\n    }\n    public function getDate(): DateTimeImmutable\n    {\n        return $this->date;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n        \/\/->getPath().$this->fileName\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/File.php","originalStartLine":20},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $this->date = new DateTimeImmutable();\n     }\n-    public function getFileName(): string\n+    protected function getFileName(): string\n     {\n         return $this->fileName->getFileName();\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.8428afdc3dc5e601e0c6aa92b589a906.infection.xml\n\nEEEEE....E..                                                      12 \/ 12 (100%)\n\nTime: 00:00.017, Memory: 12.00 MB\n\nThere were 6 errors:\n\n1) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testDepositAFileWithComplexPath\nError: Call to protected method DriveManager\\Domain\\Model\\File\\File::getFileName() from scope DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileApiVfs\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileApiVfs.php:30\n\/home\/dev\/work\/DriveManager\/src\/Application\/Service\/DropFile\/DropFile.php:27\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:45\n\n2) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testDepositASimpleFile\nError: Call to protected method DriveManager\\Domain\\Model\\File\\File::getFileName() from scope DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileApiVfs\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileApiVfs.php:30\n\/home\/dev\/work\/DriveManager\/src\/Application\/Service\/DropFile\/DropFile.php:27\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:23\n\n3) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testCountFilesDeposit\nError: Call to protected method DriveManager\\Domain\\Model\\File\\File::getFileName() from scope DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileApiVfs\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileApiVfs.php:30\n\/home\/dev\/work\/DriveManager\/src\/Application\/Service\/DropFile\/DropFile.php:27\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:65\n\n4) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testDropOneFile\nError: Call to protected method DriveManager\\Domain\\Model\\File\\File::getFileName() from scope DriveManager\\Infrastructure\\DriveProvider\\DropFileForFileSystem\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php:26\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:34\n\n5) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testFileDoesntExiste\nError: Call to protected method DriveManager\\Domain\\Model\\File\\File::getFileName() from scope DriveManager\\Infrastructure\\DriveProvider\\DropFileForFileSystem\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php:32\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:49\n\n6) DriveManager\\Tests\\Domain\\FileTest::testCreateFileFromAnExistingFile\nError: Call to protected method DriveManager\\Domain\\Model\\File\\File::getFileName() from scope DriveManager\\Tests\\Domain\\FileTest\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/FileTest.php:20\n\nERRORS!\nTests: 12, Assertions: 8, Errors: 6."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse Safe\\DateTimeImmutable;\nclass File\n{\n    private DateTimeImmutable $date;\n    public function __construct(private FileName $fileName, private Path $path = new Path(), private FileContent $content = new FileContent(), private FileId $id = new FileId())\n    {\n        $this->date = new DateTimeImmutable();\n    }\n    public function getFileName(): string\n    {\n        return $this->fileName->getFileName();\n    }\n    public function getContent(): string\n    {\n        return $this->content->getContent();\n    }\n    public function getId(): FileId\n    {\n        return $this->id;\n    }\n    public function getDate(): DateTimeImmutable\n    {\n        return $this->date;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n        \/\/->getPath().$this->fileName\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse Safe\\DateTimeImmutable;\nclass File\n{\n    private DateTimeImmutable $date;\n    public function __construct(private FileName $fileName, private Path $path = new Path(), private FileContent $content = new FileContent(), private FileId $id = new FileId())\n    {\n        $this->date = new DateTimeImmutable();\n    }\n    public function getFileName(): string\n    {\n        return $this->fileName->getFileName();\n    }\n    protected function getContent(): string\n    {\n        return $this->content->getContent();\n    }\n    public function getId(): FileId\n    {\n        return $this->id;\n    }\n    public function getDate(): DateTimeImmutable\n    {\n        return $this->date;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n        \/\/->getPath().$this->fileName\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/File.php","originalStartLine":25},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->fileName->getFileName();\n     }\n-    public function getContent(): string\n+    protected function getContent(): string\n     {\n         return $this->content->getContent();\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.3298e1123341f5d4cd479b9a6760fe19.infection.xml\n\nEEEE.....E..F\n\nTime: 00:00.022, Memory: 12.00 MB\n\nThere were 5 errors:\n\n1) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testDepositAFileWithComplexPath\nError: Call to protected method DriveManager\\Domain\\Model\\File\\File::getContent() from scope DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileApiVfs\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileApiVfs.php:31\n\/home\/dev\/work\/DriveManager\/src\/Application\/Service\/DropFile\/DropFile.php:27\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:45\n\n2) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testDepositASimpleFile\nError: Call to protected method DriveManager\\Domain\\Model\\File\\File::getContent() from scope DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileApiVfs\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileApiVfs.php:31\n\/home\/dev\/work\/DriveManager\/src\/Application\/Service\/DropFile\/DropFile.php:27\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:23\n\n3) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testCountFilesDeposit\nError: Call to protected method DriveManager\\Domain\\Model\\File\\File::getContent() from scope DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileApiVfs\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileApiVfs.php:31\n\/home\/dev\/work\/DriveManager\/src\/Application\/Service\/DropFile\/DropFile.php:27\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:65\n\n4) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testDropOneFile\nError: Call to protected method DriveManager\\Domain\\Model\\File\\File::getContent() from scope DriveManager\\Infrastructure\\DriveProvider\\DropFileForFileSystem\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php:27\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:34\n\n5) DriveManager\\Tests\\Domain\\FileTest::testCreateFileFromAnExistingFile\nError: Call to protected method DriveManager\\Domain\\Model\\File\\File::getContent() from scope DriveManager\\Tests\\Domain\\FileTest\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/FileTest.php:21\n\n--\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testDropFileFail\nFailed asserting that exception of type \"Error\" matches expected exception \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException\". Message was: \"Call to protected method DriveManager\\Domain\\Model\\File\\File::getContent() from scope DriveManager\\Infrastructure\\DriveProvider\\DropFileNextcloud\" at\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php:32\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:50\n.\n\nERRORS!\nTests: 13, Assertions: 11, Errors: 5, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse Safe\\DateTimeImmutable;\nclass File\n{\n    private DateTimeImmutable $date;\n    public function __construct(private FileName $fileName, private Path $path = new Path(), private FileContent $content = new FileContent(), private FileId $id = new FileId())\n    {\n        $this->date = new DateTimeImmutable();\n    }\n    public function getFileName(): string\n    {\n        return $this->fileName->getFileName();\n    }\n    public function getContent(): string\n    {\n        return $this->content->getContent();\n    }\n    public function getId(): FileId\n    {\n        return $this->id;\n    }\n    public function getDate(): DateTimeImmutable\n    {\n        return $this->date;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n        \/\/->getPath().$this->fileName\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse Safe\\DateTimeImmutable;\nclass File\n{\n    private DateTimeImmutable $date;\n    public function __construct(private FileName $fileName, private Path $path = new Path(), private FileContent $content = new FileContent(), private FileId $id = new FileId())\n    {\n        $this->date = new DateTimeImmutable();\n    }\n    public function getFileName(): string\n    {\n        return $this->fileName->getFileName();\n    }\n    public function getContent(): string\n    {\n        return $this->content->getContent();\n    }\n    protected function getId(): FileId\n    {\n        return $this->id;\n    }\n    public function getDate(): DateTimeImmutable\n    {\n        return $this->date;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n        \/\/->getPath().$this->fileName\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/File.php","originalStartLine":30},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->content->getContent();\n     }\n-    public function getId(): FileId\n+    protected function getId(): FileId\n     {\n         return $this->id;\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.f99e14f1d756ca2dd21b99cc106e4828.infection.xml\n\nEEEE.E.                                                             7 \/ 7 (100%)\n\nTime: 00:00.014, Memory: 12.00 MB\n\nThere were 5 errors:\n\n1) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testDepositAFileWithComplexPath\nError: Call to protected method DriveManager\\Domain\\Model\\File\\File::getid() from scope DriveManager\\Infrastructure\\Persistence\\FileRepositoryInMemory\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/Persistence\/FileRepositoryInMemory.php:19\n\/home\/dev\/work\/DriveManager\/src\/Application\/Service\/DropFile\/DropFile.php:26\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:45\n\n2) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testDepositASimpleFile\nError: Call to protected method DriveManager\\Domain\\Model\\File\\File::getid() from scope DriveManager\\Infrastructure\\Persistence\\FileRepositoryInMemory\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/Persistence\/FileRepositoryInMemory.php:19\n\/home\/dev\/work\/DriveManager\/src\/Application\/Service\/DropFile\/DropFile.php:26\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:23\n\n3) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testCountFilesDeposit\nError: Call to protected method DriveManager\\Domain\\Model\\File\\File::getid() from scope DriveManager\\Infrastructure\\Persistence\\FileRepositoryInMemory\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/Persistence\/FileRepositoryInMemory.php:19\n\/home\/dev\/work\/DriveManager\/src\/Application\/Service\/DropFile\/DropFile.php:26\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:65\n\n4) DriveManager\\Tests\\Infrastructure\\Persistence\\FileRepositoryInMemoryTest::testFindById\nError: Call to protected method DriveManager\\Domain\\Model\\File\\File::getid() from scope DriveManager\\Infrastructure\\Persistence\\FileRepositoryInMemory\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/Persistence\/FileRepositoryInMemory.php:19\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/Persistence\/FileRepositoryInMemoryTest.php:19\n\n5) DriveManager\\Tests\\Domain\\FileTest::testFileId\nError: Call to protected method DriveManager\\Domain\\Model\\File\\File::getId() from scope DriveManager\\Tests\\Domain\\FileTest\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/FileTest.php:27\n\nERRORS!\nTests: 7, Assertions: 3, Errors: 5."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse Safe\\DateTimeImmutable;\nclass File\n{\n    private DateTimeImmutable $date;\n    public function __construct(private FileName $fileName, private Path $path = new Path(), private FileContent $content = new FileContent(), private FileId $id = new FileId())\n    {\n        $this->date = new DateTimeImmutable();\n    }\n    public function getFileName(): string\n    {\n        return $this->fileName->getFileName();\n    }\n    public function getContent(): string\n    {\n        return $this->content->getContent();\n    }\n    public function getId(): FileId\n    {\n        return $this->id;\n    }\n    public function getDate(): DateTimeImmutable\n    {\n        return $this->date;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n        \/\/->getPath().$this->fileName\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse Safe\\DateTimeImmutable;\nclass File\n{\n    private DateTimeImmutable $date;\n    public function __construct(private FileName $fileName, private Path $path = new Path(), private FileContent $content = new FileContent(), private FileId $id = new FileId())\n    {\n        $this->date = new DateTimeImmutable();\n    }\n    public function getFileName(): string\n    {\n        return $this->fileName->getFileName();\n    }\n    public function getContent(): string\n    {\n        return $this->content->getContent();\n    }\n    public function getId(): FileId\n    {\n        return $this->id;\n    }\n    protected function getDate(): DateTimeImmutable\n    {\n        return $this->date;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n        \/\/->getPath().$this->fileName\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/File.php","originalStartLine":35},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->id;\n     }\n-    public function getDate(): DateTimeImmutable\n+    protected function getDate(): DateTimeImmutable\n     {\n         return $this->date;\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.fc385ff817c36028c9e13277c1e75646.infection.xml\n\nEEE..E                                                              6 \/ 6 (100%)\n\nTime: 00:00.016, Memory: 12.00 MB\n\nThere were 4 errors:\n\n1) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testDepositASimpleFile\nError: Call to protected method DriveManager\\Domain\\Model\\File\\File::getDate() from scope DriveManager\\Application\\Service\\DropFile\\DropFile\n\n\/home\/dev\/work\/DriveManager\/src\/Application\/Service\/DropFile\/DropFile.php:32\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:23\n\n2) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testCountFilesDeposit\nError: Call to protected method DriveManager\\Domain\\Model\\File\\File::getDate() from scope DriveManager\\Application\\Service\\DropFile\\DropFile\n\n\/home\/dev\/work\/DriveManager\/src\/Application\/Service\/DropFile\/DropFile.php:32\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:65\n\n3) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testDepositAFileWithComplexPath\nError: Call to protected method DriveManager\\Domain\\Model\\File\\File::getDate() from scope DriveManager\\Application\\Service\\DropFile\\DropFile\n\n\/home\/dev\/work\/DriveManager\/src\/Application\/Service\/DropFile\/DropFile.php:32\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:45\n\n4) DriveManager\\Tests\\Domain\\FileTest::testFileCreationDate\nError: Call to protected method DriveManager\\Domain\\Model\\File\\File::getDate() from scope DriveManager\\Tests\\Domain\\FileTest\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/FileTest.php:35\n\nERRORS!\nTests: 6, Assertions: 3, Errors: 4."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse Safe\\DateTimeImmutable;\nclass File\n{\n    private DateTimeImmutable $date;\n    public function __construct(private FileName $fileName, private Path $path = new Path(), private FileContent $content = new FileContent(), private FileId $id = new FileId())\n    {\n        $this->date = new DateTimeImmutable();\n    }\n    public function getFileName(): string\n    {\n        return $this->fileName->getFileName();\n    }\n    public function getContent(): string\n    {\n        return $this->content->getContent();\n    }\n    public function getId(): FileId\n    {\n        return $this->id;\n    }\n    public function getDate(): DateTimeImmutable\n    {\n        return $this->date;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n        \/\/->getPath().$this->fileName\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse Safe\\DateTimeImmutable;\nclass File\n{\n    private DateTimeImmutable $date;\n    public function __construct(private FileName $fileName, private Path $path = new Path(), private FileContent $content = new FileContent(), private FileId $id = new FileId())\n    {\n        $this->date = new DateTimeImmutable();\n    }\n    public function getFileName(): string\n    {\n        return $this->fileName->getFileName();\n    }\n    public function getContent(): string\n    {\n        return $this->content->getContent();\n    }\n    public function getId(): FileId\n    {\n        return $this->id;\n    }\n    public function getDate(): DateTimeImmutable\n    {\n        return $this->date;\n    }\n    protected function getPath(): string\n    {\n        return $this->path;\n        \/\/->getPath().$this->fileName\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/File.php","originalStartLine":40},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->date;\n     }\n-    public function getPath(): string\n+    protected function getPath(): string\n     {\n         return $this->path;\n         \/\/->getPath().$this->fileName\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.18ece3024d963140ccb7de0854c75cdd.infection.xml\n\nE....F\n\nTime: 00:00.017, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testDropOneFile\nError: Call to protected method DriveManager\\Domain\\Model\\File\\File::getPath() from scope DriveManager\\Infrastructure\\DriveProvider\\DropFileForFileSystem\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php:20\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:34\n\n--\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testThrowExceptionRepositoryDoesntExiste\nFailed asserting that exception of type \"Error\" matches expected exception \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException\". Message was: \"Call to protected method DriveManager\\Domain\\Model\\File\\File::getPath() from scope DriveManager\\Infrastructure\\DriveProvider\\DropFileForFileSystem\" at\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php:20\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:60\n.\n\nERRORS!\nTests: 6, Assertions: 6, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nclass FileContent\n{\n    public function __construct(private string $content = '')\n    {\n    }\n    public function getContent(): string\n    {\n        return $this->content;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nclass FileContent\n{\n    public function __construct(private string $content = '')\n    {\n    }\n    protected function getContent(): string\n    {\n        return $this->content;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/FileContent.php","originalStartLine":11},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private string $content = '')\n     {\n     }\n-    public function getContent(): string\n+    protected function getContent(): string\n     {\n         return $this->content;\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.36c289220d4a718f1ac9cddeafb3b1cb.infection.xml\n\n.E....EEE.E.EEF\n\nTime: 00:00.024, Memory: 12.00 MB\n\nThere were 7 errors:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testDropOneFile\nError: Call to protected method DriveManager\\Domain\\Model\\File\\FileContent::getContent() from scope DriveManager\\Domain\\Model\\File\\File\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/File.php:27\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php:27\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:34\n\n2) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testDepositAFileWithComplexPath\nError: Call to protected method DriveManager\\Domain\\Model\\File\\FileContent::getContent() from scope DriveManager\\Domain\\Model\\File\\File\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/File.php:27\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileApiVfs.php:31\n\/home\/dev\/work\/DriveManager\/src\/Application\/Service\/DropFile\/DropFile.php:27\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:45\n\n3) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testCountFilesDeposit\nError: Call to protected method DriveManager\\Domain\\Model\\File\\FileContent::getContent() from scope DriveManager\\Domain\\Model\\File\\File\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/File.php:27\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileApiVfs.php:31\n\/home\/dev\/work\/DriveManager\/src\/Application\/Service\/DropFile\/DropFile.php:27\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:65\n\n4) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testDepositASimpleFile\nError: Call to protected method DriveManager\\Domain\\Model\\File\\FileContent::getContent() from scope DriveManager\\Domain\\Model\\File\\File\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/File.php:27\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileApiVfs.php:31\n\/home\/dev\/work\/DriveManager\/src\/Application\/Service\/DropFile\/DropFile.php:27\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:23\n\n5) DriveManager\\Tests\\Domain\\FileTest::testCreateFileFromAnExistingFile\nError: Call to protected method DriveManager\\Domain\\Model\\File\\FileContent::getContent() from scope DriveManager\\Domain\\Model\\File\\File\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/File.php:27\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/FileTest.php:21\n\n6) DriveManager\\Tests\\Domain\\FileContentTest::testCreateContent\nError: Call to protected method DriveManager\\Domain\\Model\\File\\FileContent::getContent() from scope DriveManager\\Tests\\Domain\\FileContentTest\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/FileContentTest.php:13\n\n7) DriveManager\\Tests\\Domain\\FileContentTest::testCreateEmptyContent\nError: Call to protected method DriveManager\\Domain\\Model\\File\\FileContent::getContent() from scope DriveManager\\Tests\\Domain\\FileContentTest\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/FileContentTest.php:19\n\n--\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testDropFileFail\nFailed asserting that exception of type \"Error\" matches expected exception \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException\". Message was: \"Call to protected method DriveManager\\Domain\\Model\\File\\FileContent::getContent() from scope DriveManager\\Domain\\Model\\File\\File\" at\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/File.php:27\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php:32\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:50\n.\n\nERRORS!\nTests: 15, Assertions: 11, Errors: 7, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nclass FileId\n{\n    public function __construct(private string $id = \"\")\n    {\n        if (empty($id)) {\n            $this->id = uniqid(\"fil_\");\n        }\n    }\n    public function __toString(): string\n    {\n        return $this->id;\n    }\n    public function equals(FileId $fileId): bool\n    {\n        if ($this->id === $fileId->id) {\n            return true;\n        }\n        return false;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nclass FileId\n{\n    public function __construct(private string $id = \"\")\n    {\n        if (empty($id)) {\n            $this->id = uniqid(\"fil_\");\n        }\n    }\n    public function __toString(): string\n    {\n        return $this->id;\n    }\n    protected function equals(FileId $fileId): bool\n    {\n        if ($this->id === $fileId->id) {\n            return true;\n        }\n        return false;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/FileId.php","originalStartLine":19},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return $this->id;\n     }\n-    public function equals(FileId $fileId): bool\n+    protected function equals(FileId $fileId): bool\n     {\n         if ($this->id === $fileId->id) {\n             return true;","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.c85d4171451a0d8c06dcde002d4b21b9.infection.xml\n\nEE.                                                                 3 \/ 3 (100%)\n\nTime: 00:00.011, Memory: 12.00 MB\n\nThere were 2 errors:\n\n1) DriveManager\\Tests\\Domain\\FileIdTest::testIdentify2\nError: Call to protected method DriveManager\\Domain\\Model\\File\\FileId::equals() from scope DriveManager\\Tests\\Domain\\FileIdTest\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/FileIdTest.php:20\n\n2) DriveManager\\Tests\\Domain\\FileIdTest::testIdentify\nError: Call to protected method DriveManager\\Domain\\Model\\File\\FileId::equals() from scope DriveManager\\Tests\\Domain\\FileIdTest\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/FileIdTest.php:14\n\nERRORS!\nTests: 3, Assertions: 1, Errors: 2."},{"mutator":{"mutatorName":"Identical","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nclass FileId\n{\n    public function __construct(private string $id = \"\")\n    {\n        if (empty($id)) {\n            $this->id = uniqid(\"fil_\");\n        }\n    }\n    public function __toString(): string\n    {\n        return $this->id;\n    }\n    public function equals(FileId $fileId): bool\n    {\n        if ($this->id === $fileId->id) {\n            return true;\n        }\n        return false;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nclass FileId\n{\n    public function __construct(private string $id = \"\")\n    {\n        if (empty($id)) {\n            $this->id = uniqid(\"fil_\");\n        }\n    }\n    public function __toString(): string\n    {\n        return $this->id;\n    }\n    public function equals(FileId $fileId): bool\n    {\n        if ($this->id !== $fileId->id) {\n            return true;\n        }\n        return false;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/FileId.php","originalStartLine":21},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function equals(FileId $fileId): bool\n     {\n-        if ($this->id === $fileId->id) {\n+        if ($this->id !== $fileId->id) {\n             return true;\n         }\n         return false;\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.1d28cc8c8024c6d8b3869bf6bfa1d0aa.infection.xml\n\nF\n\nTime: 00:00.010, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Domain\\FileIdTest::testIdentify\nFailed asserting that true is false.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/FileIdTest.php:14\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"TrueValue","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nclass FileId\n{\n    public function __construct(private string $id = \"\")\n    {\n        if (empty($id)) {\n            $this->id = uniqid(\"fil_\");\n        }\n    }\n    public function __toString(): string\n    {\n        return $this->id;\n    }\n    public function equals(FileId $fileId): bool\n    {\n        if ($this->id === $fileId->id) {\n            return true;\n        }\n        return false;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nclass FileId\n{\n    public function __construct(private string $id = \"\")\n    {\n        if (empty($id)) {\n            $this->id = uniqid(\"fil_\");\n        }\n    }\n    public function __toString(): string\n    {\n        return $this->id;\n    }\n    public function equals(FileId $fileId): bool\n    {\n        if ($this->id === $fileId->id) {\n            return false;\n        }\n        return false;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/FileId.php","originalStartLine":22},"diff":"--- Original\n+++ New\n@@ @@\n     public function equals(FileId $fileId): bool\n     {\n         if ($this->id === $fileId->id) {\n-            return true;\n+            return false;\n         }\n         return false;\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.c2d13af312f346d2575577d30ee88cf5.infection.xml\n\n.F\n\nTime: 00:00.015, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Domain\\FileIdTest::testIdentify2\nFailed asserting that false is true.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/FileIdTest.php:20\n\nFAILURES!\nTests: 2, Assertions: 2, Failures: 1."},{"mutator":{"mutatorName":"FalseValue","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nclass FileId\n{\n    public function __construct(private string $id = \"\")\n    {\n        if (empty($id)) {\n            $this->id = uniqid(\"fil_\");\n        }\n    }\n    public function __toString(): string\n    {\n        return $this->id;\n    }\n    public function equals(FileId $fileId): bool\n    {\n        if ($this->id === $fileId->id) {\n            return true;\n        }\n        return false;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nclass FileId\n{\n    public function __construct(private string $id = \"\")\n    {\n        if (empty($id)) {\n            $this->id = uniqid(\"fil_\");\n        }\n    }\n    public function __toString(): string\n    {\n        return $this->id;\n    }\n    public function equals(FileId $fileId): bool\n    {\n        if ($this->id === $fileId->id) {\n            return true;\n        }\n        return true;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/FileId.php","originalStartLine":24},"diff":"--- Original\n+++ New\n@@ @@\n         if ($this->id === $fileId->id) {\n             return true;\n         }\n-        return false;\n+        return true;\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.a5eacf00d111a77feba783d8756438ea.infection.xml\n\n..F                                                                 3 \/ 3 (100%)\n\nTime: 00:00.010, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Domain\\FileIdTest::testIdentify\nFailed asserting that true is false.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/FileIdTest.php:14\n\nFAILURES!\nTests: 3, Assertions: 3, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nclass FileName\n{\n    public function __construct(private string $fileName)\n    {\n    }\n    public function getFileName(): string\n    {\n        return $this->fileName;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nclass FileName\n{\n    public function __construct(private string $fileName)\n    {\n    }\n    protected function getFileName(): string\n    {\n        return $this->fileName;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/FileName.php","originalStartLine":11},"diff":"--- Original\n+++ New\n@@ @@\n     public function __construct(private string $fileName)\n     {\n     }\n-    public function getFileName(): string\n+    protected function getFileName(): string\n     {\n         return $this->fileName;\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.bdb322d8be6ac3f5dfaa13fca406b177.infection.xml\n\nEE....EEEE..E                                                     13 \/ 13 (100%)\n\nTime: 00:00.023, Memory: 12.00 MB\n\nThere were 7 errors:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testFileDoesntExiste\nError: Call to protected method DriveManager\\Domain\\Model\\File\\FileName::getFileName() from scope DriveManager\\Domain\\Model\\File\\File\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/File.php:22\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php:32\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:49\n\n2) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testDropOneFile\nError: Call to protected method DriveManager\\Domain\\Model\\File\\FileName::getFileName() from scope DriveManager\\Domain\\Model\\File\\File\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/File.php:22\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php:26\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:34\n\n3) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testDepositASimpleFile\nError: Call to protected method DriveManager\\Domain\\Model\\File\\FileName::getFileName() from scope DriveManager\\Domain\\Model\\File\\File\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/File.php:22\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileApiVfs.php:30\n\/home\/dev\/work\/DriveManager\/src\/Application\/Service\/DropFile\/DropFile.php:27\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:23\n\n4) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testCountFilesDeposit\nError: Call to protected method DriveManager\\Domain\\Model\\File\\FileName::getFileName() from scope DriveManager\\Domain\\Model\\File\\File\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/File.php:22\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileApiVfs.php:30\n\/home\/dev\/work\/DriveManager\/src\/Application\/Service\/DropFile\/DropFile.php:27\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:65\n\n5) DriveManager\\Tests\\Application\\Service\\DropFile\\DropFileTest::testDepositAFileWithComplexPath\nError: Call to protected method DriveManager\\Domain\\Model\\File\\FileName::getFileName() from scope DriveManager\\Domain\\Model\\File\\File\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/File.php:22\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileApiVfs.php:30\n\/home\/dev\/work\/DriveManager\/src\/Application\/Service\/DropFile\/DropFile.php:27\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Application\/Service\/DropFile\/DropFileTest.php:45\n\n6) DriveManager\\Tests\\Domain\\FileTest::testCreateFileFromAnExistingFile\nError: Call to protected method DriveManager\\Domain\\Model\\File\\FileName::getFileName() from scope DriveManager\\Domain\\Model\\File\\File\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/File.php:22\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/FileTest.php:20\n\n7) DriveManager\\Tests\\Domain\\FileNameTest::testCreateFileName\nError: Call to protected method DriveManager\\Domain\\Model\\File\\FileName::getFileName() from scope DriveManager\\Tests\\Domain\\FileNameTest\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/FileNameTest.php:13\n\nERRORS!\nTests: 13, Assertions: 8, Errors: 7."},{"mutator":{"mutatorName":"MethodCallRemoval","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        \n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php","originalStartLine":13},"diff":"--- Original\n+++ New\n@@ @@\n     private string $path;\n     public function __construct(string $path = '')\n     {\n-        $this->validatePath($path);\n+        \n         $this->path = $path;\n     }\n     public function getPath(): string","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.0e10adc3d5f07bf886c9d9400f872266.infection.xml\n\n.....................F\n\nTime: 00:00.779, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testDetectIncompleteNextCloudPathException\nFailed asserting that exception of type \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException\" is thrown.\n\nFAILURES!\nTests: 22, Assertions: 33, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    protected function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php","originalStartLine":17},"diff":"--- Original\n+++ New\n@@ @@\n         $this->validatePath($path);\n         $this->path = $path;\n     }\n-    public function getPath(): string\n+    protected function getPath(): string\n     {\n         return $this->path;\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.39b2f3d46514ba3516fd880b03267f7e.infection.xml\n\nEE.E                                                                4 \/ 4 (100%)\n\nTime: 00:00.011, Memory: 12.00 MB\n\nThere were 3 errors:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testPathWithLinuxStyle\nError: Call to protected method DriveManager\\Domain\\Model\\File\\Path::getPath() from scope DriveManager\\Tests\\Domain\\PathTest\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/PathTest.php:14\n\n2) DriveManager\\Tests\\Domain\\PathTest::testPathWithNextCloudStyle\nError: Call to protected method DriveManager\\Domain\\Model\\File\\Path::getPath() from scope DriveManager\\Tests\\Domain\\PathTest\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/PathTest.php:21\n\n3) DriveManager\\Tests\\Domain\\PathTest::testCorrectFileSystemButWithStrangeWord\nError: Call to protected method DriveManager\\Domain\\Model\\File\\Path::getPath() from scope DriveManager\\Tests\\Domain\\PathTest\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/PathTest.php:35\n\nERRORS!\nTests: 4, Assertions: 2, Errors: 3."},{"mutator":{"mutatorName":"LogicalNot","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && $this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php","originalStartLine":24},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     private function validatePath(string $path): void\n     {\n-        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n+        if ($this->isNextCloudPath($path) && $this->isCompletePath($path)) {\n             throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n         }\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.2e92afc072ccec5eaa9d3a127f3b1fa9.infection.xml\n\n.E.F\n\nTime: 00:00.012, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testCorrectFileSystemButWithStrangeWord\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path 'http:\/\/owncloud\/nextcloud'\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/PathTest.php:34\n\n--\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testDetectIncompleteNextCloudPathException\nFailed asserting that exception of type \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException\" is thrown.\n\nERRORS!\nTests: 4, Assertions: 3, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"LogicalAnd","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) || !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php","originalStartLine":24},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     private function validatePath(string $path): void\n     {\n-        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n+        if ($this->isNextCloudPath($path) || !$this->isCompletePath($path)) {\n             throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n         }\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b17d986c9c483b2d7248b91a36de86c7.infection.xml\n\nEEE.EEF\n\nTime: 00:00.017, Memory: 12.00 MB\n\nThere were 5 errors:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testPathWithNextCloudStyle\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path '\/url\/test\/ApiNextcloud.txt'\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/PathTest.php:20\n\n2) DriveManager\\Tests\\Domain\\PathTest::testCorrectFileSystemButWithStrangeWord\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path 'http:\/\/owncloud\/nextcloud'\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/PathTest.php:34\n\n3) DriveManager\\Tests\\Domain\\PathTest::testPathWithLinuxStyle\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path '\/home\/dev'\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/PathTest.php:13\n\n4) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testFileDoesntExiste\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path 'root\/unxistingFile.txt'\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:46\n\n5) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testDropOneFile\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path ''\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:33\n\n--\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testThrowExceptionRepositoryDoesntExiste\nFailed asserting that exception of type \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException\" matches expected exception \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException\". Message was: \"NextCloud drive detect but seem incomplete. Please check path 'nonexistentDir\/'\" at\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:58\n.\n\nERRORS!\nTests: 7, Assertions: 3, Errors: 5, Failures: 1."},{"mutator":{"mutatorName":"LogicalAndAllSubExprNegation","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if (!$this->isNextCloudPath($path) && $this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php","originalStartLine":24},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     private function validatePath(string $path): void\n     {\n-        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n+        if (!$this->isNextCloudPath($path) && $this->isCompletePath($path)) {\n             throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n         }\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.bdd64b0043ac5995db43e91c3676270b.infection.xml\n\n...F\n\nTime: 00:00.011, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testDetectIncompleteNextCloudPathException\nFailed asserting that exception of type \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException\" is thrown.\n\nFAILURES!\nTests: 4, Assertions: 4, Failures: 1."},{"mutator":{"mutatorName":"LogicalAndNegation","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if (!($this->isNextCloudPath($path) && !$this->isCompletePath($path))) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php","originalStartLine":24},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     private function validatePath(string $path): void\n     {\n-        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n+        if (!($this->isNextCloudPath($path) && !$this->isCompletePath($path))) {\n             throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n         }\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.433b762e892b19ea5a53b639436dbfe6.infection.xml\n\nEEEF\n\nTime: 00:00.012, Memory: 12.00 MB\n\nThere were 3 errors:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testPathWithNextCloudStyle\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path '\/url\/test\/ApiNextcloud.txt'\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/PathTest.php:20\n\n2) DriveManager\\Tests\\Domain\\PathTest::testCorrectFileSystemButWithStrangeWord\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path 'http:\/\/owncloud\/nextcloud'\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/PathTest.php:34\n\n3) DriveManager\\Tests\\Domain\\PathTest::testPathWithLinuxStyle\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path '\/home\/dev'\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/PathTest.php:13\n\n--\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testDetectIncompleteNextCloudPathException\nFailed asserting that exception of type \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException\" is thrown.\n\nERRORS!\nTests: 4, Assertions: 1, Errors: 3, Failures: 1."},{"mutator":{"mutatorName":"LogicalAndSingleSubExprNegation","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if (!$this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php","originalStartLine":24},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     private function validatePath(string $path): void\n     {\n-        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n+        if (!$this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n             throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n         }\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.79aca6b6aa7fa1dde6d9d4f922bdb6a8.infection.xml\n\nE.EF\n\nTime: 00:00.013, Memory: 12.00 MB\n\nThere were 2 errors:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testPathWithNextCloudStyle\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path '\/url\/test\/ApiNextcloud.txt'\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/PathTest.php:20\n\n2) DriveManager\\Tests\\Domain\\PathTest::testPathWithLinuxStyle\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path '\/home\/dev'\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/PathTest.php:13\n\n--\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testDetectIncompleteNextCloudPathException\nFailed asserting that exception of type \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException\" is thrown.\n\nERRORS!\nTests: 4, Assertions: 2, Errors: 2, Failures: 1."},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php","originalStartLine":25},"diff":"--- Original\n+++ New\n@@ @@\n     private function validatePath(string $path): void\n     {\n         if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n-            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n+            new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n         }\n     }\n     private function isNextCloudPath(string $path): bool","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.9d4e30fa683c2c7c0189352724c09e98.infection.xml\n\n...F                                                                4 \/ 4 (100%)\n\nTime: 00:00.011, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testDetectIncompleteNextCloudPathException\nFailed asserting that exception of type \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException\" is thrown.\n\nFAILURES!\nTests: 4, Assertions: 4, Failures: 1."},{"mutator":{"mutatorName":"LogicalOr","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') && str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php","originalStartLine":31},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     private function isNextCloudPath(string $path): bool\n     {\n-        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n+        return str_contains($path, 'owncloud') && str_contains($path, 'nextcloud');\n     }\n     private function isCompletePath(string $path): bool\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.911fe0a9a53b0e30dd54a9b37f1c6585.infection.xml\n\n...F\n\nTime: 00:00.011, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testDetectIncompleteNextCloudPathException\nFailed asserting that exception of type \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException\" is thrown.\n\nFAILURES!\nTests: 4, Assertions: 4, Failures: 1."},{"mutator":{"mutatorName":"LogicalOrAllSubExprNegation","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return !str_contains($path, 'owncloud') || !str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php","originalStartLine":31},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     private function isNextCloudPath(string $path): bool\n     {\n-        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n+        return !str_contains($path, 'owncloud') || !str_contains($path, 'nextcloud');\n     }\n     private function isCompletePath(string $path): bool\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.59338823ca3c49fbf5209c75678eb4d8.infection.xml\n\nE.E.EEF\n\nTime: 00:00.017, Memory: 12.00 MB\n\nThere were 4 errors:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testPathWithNextCloudStyle\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path '\/url\/test\/ApiNextcloud.txt'\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/PathTest.php:20\n\n2) DriveManager\\Tests\\Domain\\PathTest::testPathWithLinuxStyle\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path '\/home\/dev'\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/PathTest.php:13\n\n3) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testDropOneFile\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path ''\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:33\n\n4) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testFileDoesntExiste\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path 'root\/unxistingFile.txt'\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:46\n\n--\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testThrowExceptionRepositoryDoesntExiste\nFailed asserting that exception of type \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException\" matches expected exception \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException\". Message was: \"NextCloud drive detect but seem incomplete. Please check path 'nonexistentDir\/'\" at\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:58\n.\n\nERRORS!\nTests: 7, Assertions: 4, Errors: 4, Failures: 1."},{"mutator":{"mutatorName":"LogicalOrNegation","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return !(str_contains($path, 'owncloud') || str_contains($path, 'nextcloud'));\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php","originalStartLine":31},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     private function isNextCloudPath(string $path): bool\n     {\n-        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n+        return !(str_contains($path, 'owncloud') || str_contains($path, 'nextcloud'));\n     }\n     private function isCompletePath(string $path): bool\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.794d4959d8808559bc1c22f72e3eb7e3.infection.xml\n\nE.EF\n\nTime: 00:00.012, Memory: 12.00 MB\n\nThere were 2 errors:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testPathWithLinuxStyle\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path '\/home\/dev'\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/PathTest.php:13\n\n2) DriveManager\\Tests\\Domain\\PathTest::testPathWithNextCloudStyle\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path '\/url\/test\/ApiNextcloud.txt'\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/PathTest.php:20\n\n--\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testDetectIncompleteNextCloudPathException\nFailed asserting that exception of type \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException\" is thrown.\n\nERRORS!\nTests: 4, Assertions: 2, Errors: 2, Failures: 1."},{"mutator":{"mutatorName":"LogicalOrSingleSubExprNegation","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return !str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php","originalStartLine":31},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     private function isNextCloudPath(string $path): bool\n     {\n-        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n+        return !str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n     }\n     private function isCompletePath(string $path): bool\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.f5b5b0156c2a40133625ef60095e5873.infection.xml\n\nE.EF\n\nTime: 00:00.013, Memory: 12.00 MB\n\nThere were 2 errors:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testPathWithNextCloudStyle\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path '\/url\/test\/ApiNextcloud.txt'\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/PathTest.php:20\n\n2) DriveManager\\Tests\\Domain\\PathTest::testPathWithLinuxStyle\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path '\/home\/dev'\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/PathTest.php:13\n\n--\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testDetectIncompleteNextCloudPathException\nFailed asserting that exception of type \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException\" is thrown.\n\nERRORS!\nTests: 4, Assertions: 2, Errors: 2, Failures: 1."},{"mutator":{"mutatorName":"LogicalOrSingleSubExprNegation","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || !str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php","originalStartLine":31},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     private function isNextCloudPath(string $path): bool\n     {\n-        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n+        return str_contains($path, 'owncloud') || !str_contains($path, 'nextcloud');\n     }\n     private function isCompletePath(string $path): bool\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.59942865d3a73ad22f423fe562b86a52.infection.xml\n\nE.E.EEF\n\nTime: 00:00.016, Memory: 12.00 MB\n\nThere were 4 errors:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testPathWithNextCloudStyle\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path '\/url\/test\/ApiNextcloud.txt'\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/PathTest.php:20\n\n2) DriveManager\\Tests\\Domain\\PathTest::testPathWithLinuxStyle\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path '\/home\/dev'\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/PathTest.php:13\n\n3) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testFileDoesntExiste\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path 'root\/unxistingFile.txt'\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:46\n\n4) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testDropOneFile\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path ''\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:33\n\n--\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testThrowExceptionRepositoryDoesntExiste\nFailed asserting that exception of type \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException\" matches expected exception \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException\". Message was: \"NextCloud drive detect but seem incomplete. Please check path 'nonexistentDir\/'\" at\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:58\n.\n\nERRORS!\nTests: 7, Assertions: 4, Errors: 4, Failures: 1."},{"mutator":{"mutatorName":"LogicalOr","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') && str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     private function isCompletePath(string $path): bool\n     {\n-        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n+        return str_starts_with($path, 'https:\/\/') && str_starts_with($path, 'http:\/\/');\n     }\n     public function __toString(): string\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.b2ae3207208b0aea48666d7c697f8f93.infection.xml\n\n.E..                                                                4 \/ 4 (100%)\n\nTime: 00:00.011, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testCorrectFileSystemButWithStrangeWord\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path 'http:\/\/owncloud\/nextcloud'\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/PathTest.php:34\n\nERRORS!\nTests: 4, Assertions: 4, Errors: 1."},{"mutator":{"mutatorName":"LogicalOrAllSubExprNegation","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return !str_starts_with($path, 'https:\/\/') || !str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     private function isCompletePath(string $path): bool\n     {\n-        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n+        return !str_starts_with($path, 'https:\/\/') || !str_starts_with($path, 'http:\/\/');\n     }\n     public function __toString(): string\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.075d275601e30be03322ae87faff11ed.infection.xml\n\n...F                                                                4 \/ 4 (100%)\n\nTime: 00:00.010, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testDetectIncompleteNextCloudPathException\nFailed asserting that exception of type \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException\" is thrown.\n\nFAILURES!\nTests: 4, Assertions: 4, Failures: 1."},{"mutator":{"mutatorName":"LogicalOrNegation","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return !(str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/'));\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     private function isCompletePath(string $path): bool\n     {\n-        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n+        return !(str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/'));\n     }\n     public function __toString(): string\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ce61070133b72b43bfba229a2a6ea299.infection.xml\n\n.E.F                                                                4 \/ 4 (100%)\n\nTime: 00:00.011, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testCorrectFileSystemButWithStrangeWord\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path 'http:\/\/owncloud\/nextcloud'\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/PathTest.php:34\n\n--\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testDetectIncompleteNextCloudPathException\nFailed asserting that exception of type \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException\" is thrown.\n\nERRORS!\nTests: 4, Assertions: 3, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"LogicalOrSingleSubExprNegation","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return !str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     private function isCompletePath(string $path): bool\n     {\n-        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n+        return !str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n     }\n     public function __toString(): string\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7d9555cb2d4345564abea89d123727e5.infection.xml\n\n...F                                                                4 \/ 4 (100%)\n\nTime: 00:00.011, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testDetectIncompleteNextCloudPathException\nFailed asserting that exception of type \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException\" is thrown.\n\nFAILURES!\nTests: 4, Assertions: 4, Failures: 1."},{"mutator":{"mutatorName":"LogicalOrSingleSubExprNegation","originalSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Domain\\Model\\File;\n\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException;\nclass Path\n{\n    private string $path;\n    public function __construct(string $path = '')\n    {\n        $this->validatePath($path);\n        $this->path = $path;\n    }\n    public function getPath(): string\n    {\n        return $this->path;\n    }\n    private function validatePath(string $path): void\n    {\n        if ($this->isNextCloudPath($path) && !$this->isCompletePath($path)) {\n            throw new IncompletePathException(\"NextCloud drive detect but seem incomplete. Please check path '{$path}'\");\n        }\n    }\n    private function isNextCloudPath(string $path): bool\n    {\n        return str_contains($path, 'owncloud') || str_contains($path, 'nextcloud');\n    }\n    private function isCompletePath(string $path): bool\n    {\n        return str_starts_with($path, 'https:\/\/') || !str_starts_with($path, 'http:\/\/');\n    }\n    public function __toString(): string\n    {\n        return $this->path;\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php","originalStartLine":36},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     private function isCompletePath(string $path): bool\n     {\n-        return str_starts_with($path, 'https:\/\/') || str_starts_with($path, 'http:\/\/');\n+        return str_starts_with($path, 'https:\/\/') || !str_starts_with($path, 'http:\/\/');\n     }\n     public function __toString(): string\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.355b418f35c3db7d2b7c66318c88b28f.infection.xml\n\n.E.F                                                                4 \/ 4 (100%)\n\nTime: 00:00.011, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testCorrectFileSystemButWithStrangeWord\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException: NextCloud drive detect but seem incomplete. Please check path 'http:\/\/owncloud\/nextcloud'\n\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:21\n\/home\/dev\/work\/DriveManager\/src\/Domain\/Model\/File\/Path.php:11\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Domain\/PathTest.php:34\n\n--\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Domain\\PathTest::testDetectIncompleteNextCloudPathException\nFailed asserting that exception of type \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\IncompletePathException\" is thrown.\n\nERRORS!\nTests: 4, Assertions: 3, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"LogicalNot","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php","originalStartLine":22},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $pathToUpload = $file->getPath();\n         $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n-        if (!is_dir($pathRepository)) {\n+        if (is_dir($pathRepository)) {\n             throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n         }\n         $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.289860f1e8fe91fd78908902229fee02.infection.xml\n\nE.F\n\nTime: 00:00.017, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testDropOneFile\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException: Repository () doesn't exist.\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php:21\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:34\n\n--\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testThrowExceptionRepositoryDoesntExiste\nFailed asserting that exception of type \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException\" is thrown.\n\nERRORS!\nTests: 3, Assertions: 3, Errors: 1, Failures: 1, Warnings: 1."},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php","originalStartLine":23},"diff":"--- Original\n+++ New\n@@ @@\n         $pathToUpload = $file->getPath();\n         $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n         if (!is_dir($pathRepository)) {\n-            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n+            new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n         }\n         $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n         file_put_contents($filePath, $file->getContent());","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.a2548e2b21084b9719ad65583138d1c1.infection.xml\n\n..F\n\nTime: 00:00.016, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testThrowExceptionRepositoryDoesntExiste\nFailed asserting that exception of type \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException\" is thrown.\n\nFAILURES!\nTests: 3, Assertions: 6, Failures: 1, Warnings: 1."},{"mutator":{"mutatorName":"FunctionCallRemoval","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        \n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php","originalStartLine":27},"diff":"--- Original\n+++ New\n@@ @@\n             throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n         }\n         $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n-        file_put_contents($filePath, $file->getContent());\n+        \n     }\n     public function isFileExists(File $file): bool\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.095a14afdf3932966b2a8036d6996ea8.infection.xml\n\nF\n\nTime: 00:00.013, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testDropOneFile\nFailed asserting that false is true.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:37\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"Concat","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists('\/' . $this->rootPath . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php","originalStartLine":32},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function isFileExists(File $file): bool\n     {\n-        return file_exists($this->rootPath . '\/' . $file->getFileName());\n+        return file_exists('\/' . $this->rootPath . $file->getFileName());\n     }\n     public function createDirectory(string $directoryName): void\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.a955921461abe79224dc76cdc31742af.infection.xml\n\n..F\n\nTime: 00:00.016, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testDropOneFile\nFailed asserting that false is true.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:38\n\nFAILURES!\nTests: 3, Assertions: 6, Failures: 1."},{"mutator":{"mutatorName":"ConcatOperandRemoval","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists('\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php","originalStartLine":32},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function isFileExists(File $file): bool\n     {\n-        return file_exists($this->rootPath . '\/' . $file->getFileName());\n+        return file_exists('\/' . $file->getFileName());\n     }\n     public function createDirectory(string $directoryName): void\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.73cef3ca255a54f09690c439bb6600e7.infection.xml\n\nF\n\nTime: 00:00.019, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testDropOneFile\nFailed asserting that false is true.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:38\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1."},{"mutator":{"mutatorName":"ConcatOperandRemoval","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php","originalStartLine":32},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function isFileExists(File $file): bool\n     {\n-        return file_exists($this->rootPath . '\/' . $file->getFileName());\n+        return file_exists($this->rootPath . $file->getFileName());\n     }\n     public function createDirectory(string $directoryName): void\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.39c16b44428bc0e285e290cab66fb88a.infection.xml\n\n..F\n\nTime: 00:00.016, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testDropOneFile\nFailed asserting that false is true.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:38\n\nFAILURES!\nTests: 3, Assertions: 6, Failures: 1."},{"mutator":{"mutatorName":"Concat","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . $file->getFileName() . '\/');\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php","originalStartLine":32},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function isFileExists(File $file): bool\n     {\n-        return file_exists($this->rootPath . '\/' . $file->getFileName());\n+        return file_exists($this->rootPath . $file->getFileName() . '\/');\n     }\n     public function createDirectory(string $directoryName): void\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.5e15350802713105a08ba11ee17bbf30.infection.xml\n\n..F\n\nTime: 00:00.016, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testDropOneFile\nFailed asserting that false is true.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:38\n\nFAILURES!\nTests: 3, Assertions: 6, Failures: 1."},{"mutator":{"mutatorName":"ConcatOperandRemoval","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/');\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php","originalStartLine":32},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function isFileExists(File $file): bool\n     {\n-        return file_exists($this->rootPath . '\/' . $file->getFileName());\n+        return file_exists($this->rootPath . '\/');\n     }\n     public function createDirectory(string $directoryName): void\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ad51b1225b840730bb54e1d6bbec1283.infection.xml\n\nF\n\nTime: 00:00.022, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testFileDoesntExiste\nFailed asserting that true is false.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:49\n\nFAILURES!\nTests: 1, Assertions: 2, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    protected function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php","originalStartLine":35},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         return file_exists($this->rootPath . '\/' . $file->getFileName());\n     }\n-    public function createDirectory(string $directoryName): void\n+    protected function createDirectory(string $directoryName): void\n     {\n         $fullPath = $this->rootPath . '\/' . $directoryName;\n         if (!is_dir($fullPath)) {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7cd7e63871c30194f73a4f05e825f619.infection.xml\n\n.E.EEE                                                              6 \/ 6 (100%)\n\nTime: 00:00.022, Memory: 12.00 MB\n\nThere were 4 errors:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testDropOneFile\nError: Call to protected method DriveManager\\Infrastructure\\DriveProvider\\DropFileForFileSystem::createDirectory() from scope DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:31\n\n2) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testCreateDirectory\nError: Call to protected method DriveManager\\Infrastructure\\DriveProvider\\DropFileForFileSystem::createDirectory() from scope DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:68\n\n3) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testCreateDirectoryWithCorrectPermissions\nError: Call to protected method DriveManager\\Infrastructure\\DriveProvider\\DropFileForFileSystem::createDirectory() from scope DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:88\n\n4) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testCreateDirectoryRecursively\nError: Call to protected method DriveManager\\Infrastructure\\DriveProvider\\DropFileForFileSystem::createDirectory() from scope DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:78\n\nERRORS!\nTests: 6, Assertions: 4, Errors: 4."},{"mutator":{"mutatorName":"Concat","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = '\/' . $this->rootPath . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php","originalStartLine":37},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function createDirectory(string $directoryName): void\n     {\n-        $fullPath = $this->rootPath . '\/' . $directoryName;\n+        $fullPath = '\/' . $this->rootPath . $directoryName;\n         if (!is_dir($fullPath)) {\n             mkdir($fullPath, 0777, true);\n             \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.4589a85a7fa4e036a86f12ab6dc255bc.infection.xml\n\n..WF\n\nTime: 00:00.016, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testCreateDirectory\nFailed asserting that false is true.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:70\n\nFAILURES!\nTests: 4, Assertions: 8, Failures: 1, Warnings: 1."},{"mutator":{"mutatorName":"ConcatOperandRemoval","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php","originalStartLine":37},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function createDirectory(string $directoryName): void\n     {\n-        $fullPath = $this->rootPath . '\/' . $directoryName;\n+        $fullPath = $this->rootPath . $directoryName;\n         if (!is_dir($fullPath)) {\n             mkdir($fullPath, 0777, true);\n             \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.5849b1423244baa0478f52240106eba9.infection.xml\n\n...F\n\nTime: 00:00.015, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testCreateDirectory\nFailed asserting that false is true.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:70\n\nFAILURES!\nTests: 4, Assertions: 8, Failures: 1."},{"mutator":{"mutatorName":"ConcatOperandRemoval","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php","originalStartLine":37},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function createDirectory(string $directoryName): void\n     {\n-        $fullPath = $this->rootPath . '\/' . $directoryName;\n+        $fullPath = '\/' . $directoryName;\n         if (!is_dir($fullPath)) {\n             mkdir($fullPath, 0777, true);\n             \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.8d9c669bd9a324bb87a46639d8ede1f7.infection.xml\n\n...F\n\nTime: 00:00.018, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testCreateDirectory\nFailed asserting that false is true.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:70\n\nFAILURES!\nTests: 4, Assertions: 8, Failures: 1, Warnings: 1."},{"mutator":{"mutatorName":"ConcatOperandRemoval","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/';\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php","originalStartLine":37},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function createDirectory(string $directoryName): void\n     {\n-        $fullPath = $this->rootPath . '\/' . $directoryName;\n+        $fullPath = $this->rootPath . '\/';\n         if (!is_dir($fullPath)) {\n             mkdir($fullPath, 0777, true);\n             \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.caeab8583cef90f978863a540577f67b.infection.xml\n\n...F\n\nTime: 00:00.016, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testCreateDirectory\nFailed asserting that false is true.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:70\n\nFAILURES!\nTests: 4, Assertions: 8, Failures: 1."},{"mutator":{"mutatorName":"Concat","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . $directoryName . '\/';\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php","originalStartLine":37},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function createDirectory(string $directoryName): void\n     {\n-        $fullPath = $this->rootPath . '\/' . $directoryName;\n+        $fullPath = $this->rootPath . $directoryName . '\/';\n         if (!is_dir($fullPath)) {\n             mkdir($fullPath, 0777, true);\n             \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.2ba8de5bd73a65cd387419d704bd0aa7.infection.xml\n\n...F\n\nTime: 00:00.022, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testCreateDirectory\nFailed asserting that false is true.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:70\n\nFAILURES!\nTests: 4, Assertions: 8, Failures: 1."},{"mutator":{"mutatorName":"LogicalNot","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php","originalStartLine":38},"diff":"--- Original\n+++ New\n@@ @@\n     public function createDirectory(string $directoryName): void\n     {\n         $fullPath = $this->rootPath . '\/' . $directoryName;\n-        if (!is_dir($fullPath)) {\n+        if (is_dir($fullPath)) {\n             mkdir($fullPath, 0777, true);\n             \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n         }\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.4d59660a7fd7261cb90b0bfb5528dd5f.infection.xml\n\n.W.F\n\nTime: 00:00.018, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testCreateDirectory\nFailed asserting that false is true.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:70\n\nFAILURES!\nTests: 4, Assertions: 8, Failures: 1, Warnings: 1."},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 510, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php","originalStartLine":39},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $fullPath = $this->rootPath . '\/' . $directoryName;\n         if (!is_dir($fullPath)) {\n-            mkdir($fullPath, 0777, true);\n+            mkdir($fullPath, 510, true);\n             \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n         }\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.12d69099e6e7c29aa3180419e39f0baf.infection.xml\n\n.....F                                                              6 \/ 6 (100%)\n\nTime: 00:00.017, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testCreateDirectoryWithCorrectPermissions\nFailed asserting that 510 matches expected 511.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:91\n\nFAILURES!\nTests: 6, Assertions: 10, Failures: 1."},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 512, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php","originalStartLine":39},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $fullPath = $this->rootPath . '\/' . $directoryName;\n         if (!is_dir($fullPath)) {\n-            mkdir($fullPath, 0777, true);\n+            mkdir($fullPath, 512, true);\n             \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n         }\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7f6644c841301dde884790c6200c5042.infection.xml\n\n....F\n\nTime: 00:00.017, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testCreateDirectoryWithCorrectPermissions\nFailed asserting that 0 matches expected 511.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:91\n\nFAILURES!\nTests: 5, Assertions: 9, Failures: 1."},{"mutator":{"mutatorName":"FunctionCallRemoval","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            mkdir($fullPath, 0777, true);\n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\RepositoryDoesNotExistException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nclass DropFileForFileSystem implements DropFileInterface\n{\n    private const PATH_REPOSITORY = '%s\/%s';\n    private const FULL_PATH = '%s\/%s';\n    public function __construct(private string $rootPath)\n    {\n    }\n    public function dropFile(File $file): void\n    {\n        $pathToUpload = $file->getPath();\n        $pathRepository = sprintf(self::PATH_REPOSITORY, $this->rootPath, $pathToUpload);\n        if (!is_dir($pathRepository)) {\n            throw new RepositoryDoesNotExistException(\"Repository ({$pathToUpload}) doesn't exist.\");\n        }\n        $filePath = sprintf(self::FULL_PATH, $pathRepository, $file->getFileName());\n        file_put_contents($filePath, $file->getContent());\n    }\n    public function isFileExists(File $file): bool\n    {\n        return file_exists($this->rootPath . '\/' . $file->getFileName());\n    }\n    public function createDirectory(string $directoryName): void\n    {\n        $fullPath = $this->rootPath . '\/' . $directoryName;\n        if (!is_dir($fullPath)) {\n            \n            \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n        }\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileForFileSystem.php","originalStartLine":39},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $fullPath = $this->rootPath . '\/' . $directoryName;\n         if (!is_dir($fullPath)) {\n-            mkdir($fullPath, 0777, true);\n+            \n             \/\/vfsStream::newDirectory($directoryName, 0777)->at(vfsStream::setup($this->rootPath));\n         }\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.891e148c25c95f0701099ccd4075bb0d.infection.xml\n\n.F\n\nTime: 00:00.016, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileForFileSystemTest::testCreateDirectory\nFailed asserting that false is true.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileForFileSystemTest.php:70\n\nFAILURES!\nTests: 2, Assertions: 3, Failures: 1."},{"mutator":{"mutatorName":"AssignmentEqual","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 200;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client = null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 200;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php","originalStartLine":22},"diff":"--- Original\n+++ New\n@@ @@\n     private HttpClientInterface $client;\n     public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n     {\n-        if ($client == null) {\n+        if ($client = null) {\n             $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n         } else {\n             $this->client = $client;","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.1c93ddecb0f168381dfb5e2afd06376d.infection.xml\n\nEEEEEE                                                              6 \/ 6 (100%)\n\nTime: 00:00.014, Memory: 10.00 MB\n\nThere were 6 errors:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testDropFileFail\nTypeError: Cannot assign null to property DriveManager\\Infrastructure\\DriveProvider\\DropFileNextcloud::$client of type Symfony\\Contracts\\HttpClient\\HttpClientInterface\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php:19\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:36\n\n2) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testDropBody\nTypeError: Cannot assign null to property DriveManager\\Infrastructure\\DriveProvider\\DropFileNextcloud::$client of type Symfony\\Contracts\\HttpClient\\HttpClientInterface\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php:19\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:36\n\n3) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testIsFileExistsTrue\nTypeError: Cannot assign null to property DriveManager\\Infrastructure\\DriveProvider\\DropFileNextcloud::$client of type Symfony\\Contracts\\HttpClient\\HttpClientInterface\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php:19\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:36\n\n4) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testReadAFile\nTypeError: Cannot assign null to property DriveManager\\Infrastructure\\DriveProvider\\DropFileNextcloud::$client of type Symfony\\Contracts\\HttpClient\\HttpClientInterface\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php:19\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:36\n\n5) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testDropFileSuccess\nTypeError: Cannot assign null to property DriveManager\\Infrastructure\\DriveProvider\\DropFileNextcloud::$client of type Symfony\\Contracts\\HttpClient\\HttpClientInterface\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php:19\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:36\n\n6) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testIsFileExistsFalse\nTypeError: Cannot assign null to property DriveManager\\Infrastructure\\DriveProvider\\DropFileNextcloud::$client of type Symfony\\Contracts\\HttpClient\\HttpClientInterface\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php:19\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:36\n\nERRORS!\nTests: 6, Assertions: 0, Errors: 6."},{"mutator":{"mutatorName":"Equal","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 200;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client != null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 200;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php","originalStartLine":22},"diff":"--- Original\n+++ New\n@@ @@\n     private HttpClientInterface $client;\n     public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n     {\n-        if ($client == null) {\n+        if ($client != null) {\n             $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n         } else {\n             $this->client = $client;","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.999d67c1b521d23c725c8be640711760.infection.xml\n\nEEEEEE                                                              6 \/ 6 (100%)\n\nTime: 00:00.011, Memory: 10.00 MB\n\nThere were 6 errors:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testDropFileFail\nTypeError: Cannot assign null to property DriveManager\\Infrastructure\\DriveProvider\\DropFileNextcloud::$client of type Symfony\\Contracts\\HttpClient\\HttpClientInterface\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php:19\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:36\n\n2) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testDropBody\nTypeError: Cannot assign null to property DriveManager\\Infrastructure\\DriveProvider\\DropFileNextcloud::$client of type Symfony\\Contracts\\HttpClient\\HttpClientInterface\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php:19\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:36\n\n3) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testIsFileExistsTrue\nTypeError: Cannot assign null to property DriveManager\\Infrastructure\\DriveProvider\\DropFileNextcloud::$client of type Symfony\\Contracts\\HttpClient\\HttpClientInterface\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php:19\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:36\n\n4) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testReadAFile\nTypeError: Cannot assign null to property DriveManager\\Infrastructure\\DriveProvider\\DropFileNextcloud::$client of type Symfony\\Contracts\\HttpClient\\HttpClientInterface\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php:19\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:36\n\n5) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testDropFileSuccess\nTypeError: Cannot assign null to property DriveManager\\Infrastructure\\DriveProvider\\DropFileNextcloud::$client of type Symfony\\Contracts\\HttpClient\\HttpClientInterface\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php:19\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:36\n\n6) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testIsFileExistsFalse\nTypeError: Cannot assign null to property DriveManager\\Infrastructure\\DriveProvider\\DropFileNextcloud::$client of type Symfony\\Contracts\\HttpClient\\HttpClientInterface\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php:19\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:36\n\nERRORS!\nTests: 6, Assertions: 0, Errors: 6."},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 200;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = [];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 200;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php","originalStartLine":31},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function dropFile(File $file): void\n     {\n-        $requestOptions = ['body' => $file->getContent()];\n+        $requestOptions = [];\n         $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n         if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n             throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.3000eec91a4473c23bd533564a69ba50.infection.xml\n\n.....F                                                              6 \/ 6 (100%)\n\nTime: 00:00.925, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testDropBody\nNo valid request captured or missing \"options\" or \"body\" key.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:101\n\nFAILURES!\nTests: 6, Assertions: 7, Failures: 1."},{"mutator":{"mutatorName":"ArrayItem","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 200;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' > $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 200;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php","originalStartLine":32},"diff":"--- Original\n+++ New\n@@ @@\n     }\n     public function dropFile(File $file): void\n     {\n-        $requestOptions = ['body' => $file->getContent()];\n+        $requestOptions = ['body' > $file->getContent()];\n         $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n         if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n             throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.ec673fd22512bfdc9bdb7ce6390550e2.infection.xml\n\nF\n\nTime: 00:00.016, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testDropBody\nNo valid request captured or missing \"options\" or \"body\" key.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:101\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"LogicalNot","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 200;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 200;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php","originalStartLine":37},"diff":"--- Original\n+++ New\n@@ @@\n     {\n         $requestOptions = ['body' => $file->getContent()];\n         $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n-        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n+        if (in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n             throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n         }\n     }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.cab65b50599d6d1448415f7b6b8cf882.infection.xml\n\n..EF\n\nTime: 00:00.512, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testDropFileSuccess\nDriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException: Download failed : 200\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php:27\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:72\n\n--\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testDropFileFail\nFailed asserting that exception of type \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException\" is thrown.\n\nERRORS!\nTests: 4, Assertions: 3, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"Concat","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 200;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException($response->getStatusCode() . 'Download failed : ');\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 200;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php","originalStartLine":38},"diff":"--- Original\n+++ New\n@@ @@\n         $requestOptions = ['body' => $file->getContent()];\n         $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n         if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n-            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n+            throw new FailUploadingFileException($response->getStatusCode() . 'Download failed : ');\n         }\n     }\n     public function isFileExists(File $file): bool","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.de2402470ab24c5e39d5a7c98793da64.infection.xml\n\n...F\n\nTime: 00:00.527, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testDropFileFail\nFailed asserting that exception message '404Download failed : ' matches '\/Download failed : \\d{3}\/'.\n\nFAILURES!\nTests: 4, Assertions: 5, Failures: 1."},{"mutator":{"mutatorName":"ConcatOperandRemoval","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 200;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException($response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 200;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php","originalStartLine":38},"diff":"--- Original\n+++ New\n@@ @@\n         $requestOptions = ['body' => $file->getContent()];\n         $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n         if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n-            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n+            throw new FailUploadingFileException($response->getStatusCode());\n         }\n     }\n     public function isFileExists(File $file): bool","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.258c5cae96b47d2c5b1f05751a7b6904.infection.xml\n\n...F\n\nTime: 00:00.686, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testDropFileFail\nFailed asserting that exception message '404' matches '\/Download failed : \\d{3}\/'.\n\nFAILURES!\nTests: 4, Assertions: 5, Failures: 1."},{"mutator":{"mutatorName":"ConcatOperandRemoval","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 200;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException('Download failed : ');\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 200;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php","originalStartLine":38},"diff":"--- Original\n+++ New\n@@ @@\n         $requestOptions = ['body' => $file->getContent()];\n         $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n         if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n-            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n+            throw new FailUploadingFileException('Download failed : ');\n         }\n     }\n     public function isFileExists(File $file): bool","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.97b8d0a3769f9b9d82d2ce56e96bf994.infection.xml\n\n.....F                                                              6 \/ 6 (100%)\n\nTime: 00:00.974, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testDropFileFail\nFailed asserting that exception message 'Download failed : ' matches '\/Download failed : \\d{3}\/'.\n\nFAILURES!\nTests: 6, Assertions: 7, Failures: 1."},{"mutator":{"mutatorName":"Throw_","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 200;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 200;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php","originalStartLine":38},"diff":"--- Original\n+++ New\n@@ @@\n         $requestOptions = ['body' => $file->getContent()];\n         $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n         if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n-            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n+            new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n         }\n     }\n     public function isFileExists(File $file): bool","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.6bc04e898575fb7656eacbdb6e2462cd.infection.xml\n\n.....F                                                              6 \/ 6 (100%)\n\nTime: 00:01.006, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testDropFileFail\nFailed asserting that exception of type \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException\" is thrown.\n\nFAILURES!\nTests: 6, Assertions: 6, Failures: 1."},{"mutator":{"mutatorName":"DecrementInteger","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 200;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 199;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php","originalStartLine":46},"diff":"--- Original\n+++ New\n@@ @@\n     public function isFileExists(File $file): bool\n     {\n         $response = $this->client->request('HEAD', $file->getPath());\n-        return $response->getStatusCode() === 200;\n+        return $response->getStatusCode() === 199;\n     }\n     public function readFile(File $file): string\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.9ed0b933de074b7682e1ab61a33d26aa.infection.xml\n\nF\n\nTime: 00:00.014, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testDropFileSuccess\nFailed asserting that false is true.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:74\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"IncrementInteger","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 200;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 201;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php","originalStartLine":46},"diff":"--- Original\n+++ New\n@@ @@\n     public function isFileExists(File $file): bool\n     {\n         $response = $this->client->request('HEAD', $file->getPath());\n-        return $response->getStatusCode() === 200;\n+        return $response->getStatusCode() === 201;\n     }\n     public function readFile(File $file): string\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.12fad5d7c5ca7397a91e4da45c6615ac.infection.xml\n\nF\n\nTime: 00:00.016, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testDropFileSuccess\nFailed asserting that false is true.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:74\n\nFAILURES!\nTests: 1, Assertions: 1, Failures: 1."},{"mutator":{"mutatorName":"Identical","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 200;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() !== 200;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php","originalStartLine":46},"diff":"--- Original\n+++ New\n@@ @@\n     public function isFileExists(File $file): bool\n     {\n         $response = $this->client->request('HEAD', $file->getPath());\n-        return $response->getStatusCode() === 200;\n+        return $response->getStatusCode() !== 200;\n     }\n     public function readFile(File $file): string\n     {","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7a85a67d91f1f38985ea62f31b9cfa9b.infection.xml\n\n.F\n\nTime: 00:00.016, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testIsFileExistsTrue\nFailed asserting that false is true.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:119\n\nFAILURES!\nTests: 2, Assertions: 2, Failures: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 200;\n    }\n    public function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse DriveManager\\Application\\Service\\DropFile\\DropFileInterface;\nuse DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException;\nuse DriveManager\\Domain\\Model\\File\\File;\nuse DriveManager\\Domain\\Model\\File\\FileName;\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nclass DropFileNextcloud implements DropFileInterface\n{\n    private const SUCCESS_STATUS_CODES = [200, 201, 204];\n    private HttpClientInterface $client;\n    public function __construct(string $baseUri, string $mailAddress, string $password, ?HttpClientInterface $client = null)\n    {\n        if ($client == null) {\n            $this->client = (new HttpClientFactory())->create($baseUri, $mailAddress, $password);\n        } else {\n            $this->client = $client;\n        }\n    }\n    public function dropFile(File $file): void\n    {\n        $requestOptions = ['body' => $file->getContent()];\n        $response = $this->client->request('PUT', $file->getPath(), $requestOptions);\n        if (!in_array($response->getStatusCode(), self::SUCCESS_STATUS_CODES)) {\n            throw new FailUploadingFileException('Download failed : ' . $response->getStatusCode());\n        }\n    }\n    public function isFileExists(File $file): bool\n    {\n        $response = $this->client->request('HEAD', $file->getPath());\n        return $response->getStatusCode() === 200;\n    }\n    protected function readFile(File $file): string\n    {\n        $response = $this->client->request('GET', $file->getPath());\n        return $response->getContent();\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php","originalStartLine":49},"diff":"--- Original\n+++ New\n@@ @@\n         $response = $this->client->request('HEAD', $file->getPath());\n         return $response->getStatusCode() === 200;\n     }\n-    public function readFile(File $file): string\n+    protected function readFile(File $file): string\n     {\n         $response = $this->client->request('GET', $file->getPath());\n         return $response->getContent();\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.7dfe5df99872fd4bbec1937e81ef0ac2.infection.xml\n\nE.....                                                              6 \/ 6 (100%)\n\nTime: 00:00.846, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testReadAFile\nError: Call to protected method DriveManager\\Infrastructure\\DriveProvider\\DropFileNextcloud::readFile() from scope DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:143\n\nERRORS!\nTests: 6, Assertions: 6, Errors: 1."},{"mutator":{"mutatorName":"PublicVisibility","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpClient\\HttpClient;\nclass HttpClientFactory\n{\n    public function create(string $baseUri, string $username, string $password): HttpClientInterface\n    {\n        return HttpClient::create(['base_uri' => $baseUri, 'auth_basic' => [$username, $password], 'headers' => ['OCS-APIRequest' => 'true', 'Accept' => 'application\/json']]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpClient\\HttpClient;\nclass HttpClientFactory\n{\n    protected function create(string $baseUri, string $username, string $password): HttpClientInterface\n    {\n        return HttpClient::create(['base_uri' => $baseUri, 'auth_basic' => [$username, $password], 'headers' => ['OCS-APIRequest' => 'true', 'Accept' => 'application\/json']]);\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/HttpClientFactory.php","originalStartLine":10},"diff":"--- Original\n+++ New\n@@ @@\n use Symfony\\Component\\HttpClient\\HttpClient;\n class HttpClientFactory\n {\n-    public function create(string $baseUri, string $username, string $password): HttpClientInterface\n+    protected function create(string $baseUri, string $username, string $password): HttpClientInterface\n     {\n         return HttpClient::create(['base_uri' => $baseUri, 'auth_basic' => [$username, $password], 'headers' => ['OCS-APIRequest' => 'true', 'Accept' => 'application\/json']]);\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.438ef3dbf9226cfa90fddd34fce09123.infection.xml\n\nEEEEEEE                                                             7 \/ 7 (100%)\n\nTime: 00:00.011, Memory: 12.00 MB\n\nThere were 7 errors:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testDropFileSuccess\nError: Call to protected method DriveManager\\Infrastructure\\DriveProvider\\HttpClientFactory::create() from scope DriveManager\\Infrastructure\\DriveProvider\\DropFileNextcloud\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php:23\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:36\n\n2) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testReadAFile\nError: Call to protected method DriveManager\\Infrastructure\\DriveProvider\\HttpClientFactory::create() from scope DriveManager\\Infrastructure\\DriveProvider\\DropFileNextcloud\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php:23\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:36\n\n3) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testIsFileExistsTrue\nError: Call to protected method DriveManager\\Infrastructure\\DriveProvider\\HttpClientFactory::create() from scope DriveManager\\Infrastructure\\DriveProvider\\DropFileNextcloud\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php:23\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:36\n\n4) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testIsFileExistsFalse\nError: Call to protected method DriveManager\\Infrastructure\\DriveProvider\\HttpClientFactory::create() from scope DriveManager\\Infrastructure\\DriveProvider\\DropFileNextcloud\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php:23\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:36\n\n5) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testDropBody\nError: Call to protected method DriveManager\\Infrastructure\\DriveProvider\\HttpClientFactory::create() from scope DriveManager\\Infrastructure\\DriveProvider\\DropFileNextcloud\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php:23\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:36\n\n6) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testDropFileFail\nError: Call to protected method DriveManager\\Infrastructure\\DriveProvider\\HttpClientFactory::create() from scope DriveManager\\Infrastructure\\DriveProvider\\DropFileNextcloud\n\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php:23\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:36\n\n7) DriveManager\\Tests\\Infrastructure\\DriveProvider\\HttpClientFactoryTest::testCreate\nError: Call to protected method DriveManager\\Infrastructure\\DriveProvider\\HttpClientFactory::create() from scope DriveManager\\Tests\\Infrastructure\\DriveProvider\\HttpClientFactoryTest\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/HttpClientFactoryTest.php:21\n\nERRORS!\nTests: 7, Assertions: 0, Errors: 7."},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpClient\\HttpClient;\nclass HttpClientFactory\n{\n    public function create(string $baseUri, string $username, string $password): HttpClientInterface\n    {\n        return HttpClient::create(['base_uri' => $baseUri, 'auth_basic' => [$username, $password], 'headers' => ['OCS-APIRequest' => 'true', 'Accept' => 'application\/json']]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpClient\\HttpClient;\nclass HttpClientFactory\n{\n    public function create(string $baseUri, string $username, string $password): HttpClientInterface\n    {\n        return HttpClient::create(['auth_basic' => [$username, $password], 'headers' => ['OCS-APIRequest' => 'true', 'Accept' => 'application\/json']]);\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/HttpClientFactory.php","originalStartLine":12},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function create(string $baseUri, string $username, string $password): HttpClientInterface\n     {\n-        return HttpClient::create(['base_uri' => $baseUri, 'auth_basic' => [$username, $password], 'headers' => ['OCS-APIRequest' => 'true', 'Accept' => 'application\/json']]);\n+        return HttpClient::create(['auth_basic' => [$username, $password], 'headers' => ['OCS-APIRequest' => 'true', 'Accept' => 'application\/json']]);\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.623ba19d9fa7112df5ee9d5d30ff8920.infection.xml\n\n...E.F\n\nTime: 00:00.021, Memory: 12.00 MB\n\nThere was 1 error:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testIsFileExistsFalse\nSymfony\\Component\\HttpClient\\Exception\\InvalidArgumentException: Invalid URL: scheme is missing in \"noneExistingDir\/\". Did you forget to add \"http(s):\/\/\"?\n\n\/home\/dev\/work\/DriveManager\/vendor\/symfony\/http-client\/HttpClientTrait.php:565\n\/home\/dev\/work\/DriveManager\/vendor\/symfony\/http-client\/HttpClientTrait.php:179\n\/home\/dev\/work\/DriveManager\/vendor\/symfony\/http-client\/CurlHttpClient.php:100\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php:44\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:126\n\n--\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\DropFileNextcloudTest::testDropFileFail\nFailed asserting that exception of type \"Symfony\\Component\\HttpClient\\Exception\\InvalidArgumentException\" matches expected exception \"DriveManager\\Application\\Service\\DropFile\\Exceptions\\FailUploadingFileException\". Message was: \"Invalid URL: scheme is missing in \"Bad\/link\/testfile.txt\". Did you forget to add \"http(s):\/\/\"?\" at\n\/home\/dev\/work\/DriveManager\/vendor\/symfony\/http-client\/HttpClientTrait.php:565\n\/home\/dev\/work\/DriveManager\/vendor\/symfony\/http-client\/HttpClientTrait.php:179\n\/home\/dev\/work\/DriveManager\/vendor\/symfony\/http-client\/CurlHttpClient.php:100\n\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/DropFileNextcloud.php:35\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/DropFileNextcloudTest.php:50\n.\n\nERRORS!\nTests: 6, Assertions: 5, Errors: 1, Failures: 1."},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpClient\\HttpClient;\nclass HttpClientFactory\n{\n    public function create(string $baseUri, string $username, string $password): HttpClientInterface\n    {\n        return HttpClient::create(['base_uri' => $baseUri, 'auth_basic' => [$username, $password], 'headers' => ['OCS-APIRequest' => 'true', 'Accept' => 'application\/json']]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpClient\\HttpClient;\nclass HttpClientFactory\n{\n    public function create(string $baseUri, string $username, string $password): HttpClientInterface\n    {\n        return HttpClient::create(['base_uri' => $baseUri, 'auth_basic' => [$password], 'headers' => ['OCS-APIRequest' => 'true', 'Accept' => 'application\/json']]);\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/HttpClientFactory.php","originalStartLine":14},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function create(string $baseUri, string $username, string $password): HttpClientInterface\n     {\n-        return HttpClient::create(['base_uri' => $baseUri, 'auth_basic' => [$username, $password], 'headers' => ['OCS-APIRequest' => 'true', 'Accept' => 'application\/json']]);\n+        return HttpClient::create(['base_uri' => $baseUri, 'auth_basic' => [$password], 'headers' => ['OCS-APIRequest' => 'true', 'Accept' => 'application\/json']]);\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.5e44a9eb13e3631bb8ab7976b053d2e8.infection.xml\n\n......F                                                             7 \/ 7 (100%)\n\nTime: 00:00.334, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\HttpClientFactoryTest::testCreate\nFailed asserting that two strings are equal.\n--- Expected\n+++ Actual\n@@ @@\n-'emailAddress:psw'\n+'psw'\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/HttpClientFactoryTest.php:32\n\nFAILURES!\nTests: 7, Assertions: 13, Failures: 1."},{"mutator":{"mutatorName":"ArrayItemRemoval","originalSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpClient\\HttpClient;\nclass HttpClientFactory\n{\n    public function create(string $baseUri, string $username, string $password): HttpClientInterface\n    {\n        return HttpClient::create(['base_uri' => $baseUri, 'auth_basic' => [$username, $password], 'headers' => ['OCS-APIRequest' => 'true', 'Accept' => 'application\/json']]);\n    }\n}","mutatedSourceCode":"<?php\n\nnamespace DriveManager\\Infrastructure\\DriveProvider;\n\nuse Symfony\\Contracts\\HttpClient\\HttpClientInterface;\nuse Symfony\\Component\\HttpClient\\HttpClient;\nclass HttpClientFactory\n{\n    public function create(string $baseUri, string $username, string $password): HttpClientInterface\n    {\n        return HttpClient::create(['base_uri' => $baseUri, 'auth_basic' => [$username, $password], 'headers' => ['Accept' => 'application\/json']]);\n    }\n}","originalFilePath":"\/home\/dev\/work\/DriveManager\/src\/Infrastructure\/DriveProvider\/HttpClientFactory.php","originalStartLine":15},"diff":"--- Original\n+++ New\n@@ @@\n {\n     public function create(string $baseUri, string $username, string $password): HttpClientInterface\n     {\n-        return HttpClient::create(['base_uri' => $baseUri, 'auth_basic' => [$username, $password], 'headers' => ['OCS-APIRequest' => 'true', 'Accept' => 'application\/json']]);\n+        return HttpClient::create(['base_uri' => $baseUri, 'auth_basic' => [$username, $password], 'headers' => ['Accept' => 'application\/json']]);\n     }\n }","processOutput":"PHPUnit 11.1.1 by Sebastian Bergmann and contributors.\n\nRuntime:       PHP 8.3.4\nConfiguration: \/tmp\/infection\/phpunitConfiguration.1b6ee10094a91c7877c0301b0956fd71.infection.xml\n\n......F                                                             7 \/ 7 (100%)\n\nTime: 00:00.786, Memory: 12.00 MB\n\nThere was 1 failure:\n\n1) DriveManager\\Tests\\Infrastructure\\DriveProvider\\HttpClientFactoryTest::testCreate\nFailed asserting that actual size 1 matches expected size 2.\n\n\/home\/dev\/work\/DriveManager\/tests\/unit\/Infrastructure\/DriveProvider\/HttpClientFactoryTest.php:35\n\nFAILURES!\nTests: 7, Assertions: 16, Failures: 1."}],"errored":[],"syntaxErrors":[],"uncovered":[],"ignored":[]}